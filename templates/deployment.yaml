apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "spring-boot-app.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "spring-boot-app.name" . }}
    helm.sh/chart: {{ include "spring-boot-app.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "spring-boot-app.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.strategy.maxSurge }}
      maxUnavailable: {{ .Values.strategy.maxUnavailable }}
    type: {{ .Values.strategy.type }}
  template:
    metadata:
      annotations:
        checksum/latest: "{{ if eq (.Values.image.tag | replace ":" "") "latest" }}{{ uuidv4 }}{{ end }}"
        checksum/forceRestart: "{{ .Values.force_restart }}"
      labels:
        app.kubernetes.io/name: {{ template "spring-boot-app.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      name: {{ template "spring-boot-app.fullname" . }}
    spec:
      containers:
      - name: {{ template "spring-boot-app.name" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag}}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # envFrom:
        # - configMapRef:
        #     name: {{ template "spring-boot-app.fullname" $ }}
        # - secretRef:
        #     name: {{ template "spring-boot-app.fullname" $ }}
        securityContext:
          privileged: {{ .Values.image.securityContext.privileged }}
        resources: {}